insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,1,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('24/09/04', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,1,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('24/09/26', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,1,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('24/10/11', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,1,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('24/10/26', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,1,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('24/11/03', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,1,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('24/11/18', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,1,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('24/12/03', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,1,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('24/12/18', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,1,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/01/02', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,41,1,'필기',q'[도커를 사용하여 간단한 Node.js 애플리케이션을 컨테이너화하고, 이를 실행하는 방법을 작성해 보세요.]', to_date('25/01/17', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,42,1,'필기',q'[YAML 파일을 사용하여 디플로이먼트와 서비스를 생성해 보세요.]', to_date('25/01/30', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,2,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('24/10/01', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,2,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('24/10/16', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,2,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('24/10/31', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,2,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('24/11/15', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,2,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('24/11/30', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,2,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('24/12/15', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,2,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('24/12/23', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,2,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/01/07', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,2,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/01/22', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,41,2,'필기',q'[도커를 사용하여 간단한 Node.js 애플리케이션을 컨테이너화하고, 이를 실행하는 방법을 작성해 보세요.]', to_date('25/02/06', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,42,2,'필기',q'[YAML 파일을 사용하여 디플로이먼트와 서비스를 생성해 보세요.]', to_date('25/02/23', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,3,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('24/11/29', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,3,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('24/12/21', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,3,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('25/01/05', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,3,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('25/01/20', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,3,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('25/01/28', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,3,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('25/02/12', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,3,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('25/02/27', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,3,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/03/14', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,3,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/03/29', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,37,3,'필기',q'[Apache Kafka를 사용하여 간단한 프로듀서와 컨슈머 애플리케이션을 작성해 보세요. 프로듀서는 특정 주제로 메시지를 전송하고, 컨슈머는 해당 주제로부터 메시지를 소비해야 합니다.]', to_date('25/04/17', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,4,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('24/12/12', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,4,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('25/01/03', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,4,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('25/01/18', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,4,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('25/02/02', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,4,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('25/02/10', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,4,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('25/02/25', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,4,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('25/03/12', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,4,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/03/27', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,4,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/04/04', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,41,4,'필기',q'[도커를 사용하여 간단한 Node.js 애플리케이션을 컨테이너화하고, 이를 실행하는 방법을 작성해 보세요.]', to_date('25/04/19', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,42,4,'필기',q'[YAML 파일을 사용하여 디플로이먼트와 서비스를 생성해 보세요.]', to_date('25/05/06', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,5,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('25/01/02', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,5,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('25/01/24', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,5,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('25/02/08', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,5,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('25/02/23', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,5,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('25/03/10', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,5,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('25/03/18', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,5,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('25/04/02', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,5,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/04/17', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,5,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/05/02', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,41,5,'필기',q'[도커를 사용하여 간단한 Node.js 애플리케이션을 컨테이너화하고, 이를 실행하는 방법을 작성해 보세요.]', to_date('25/05/17', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,42,5,'필기',q'[YAML 파일을 사용하여 디플로이먼트와 서비스를 생성해 보세요.]', to_date('25/06/01', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,6,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('25/02/10', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,6,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('25/03/04', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,6,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('25/03/19', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,6,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('25/04/03', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,6,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('25/04/11', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,6,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('25/04/26', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,6,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('25/05/18', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,6,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/06/09', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,6,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/06/24', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,37,6,'필기',q'[Apache Kafka를 사용하여 간단한 프로듀서와 컨슈머 애플리케이션을 작성해 보세요. 프로듀서는 특정 주제로 메시지를 전송하고, 컨슈머는 해당 주제로부터 메시지를 소비해야 합니다.]', to_date('25/07/09', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,1,1,'필기',q'[두 개의 정수 배열이 주어졌을 때, 두 배열의 교집합을 찾는 프로그램을 작성하세요. 단, 교집합의 원소는 중복되지 않으며 정렬된 상태로 출력해야 합니다.]', to_date('25/03/25', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,27,1,'필기',q'[SQL 쿼리는 어떤 테이블의 "salary" 컬럼에 대해 특정 직원의 급여를 업데이트합니다. 이를 완성하세요.]', to_date('25/04/16', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,2,1,'필기',q'[HTML 코드를 작성하여 간단한 웹 페이지를 만들어 보세요. 페이지에는 "Hello, World!"라는 제목과 "This is my first webpage."라는 내용을 가진 단락이 포함되어야 합니다.]', to_date('25/05/01', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,3,1,'필기',q'[HTML 코드와 함께 사용할 수 있는 CSS를 작성하여, 단락 (<p>)의 글자 색을 파란색으로, 글자 크기를 20픽셀로, 배경 색을 노란색으로 설정하세요.]', to_date('25/05/16', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,11,1,'필기',q'[다음은 간단한 서블릿을 작성하는 예제입니다. 사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 서블릿을 작성하세요. 서블릿 클래스 이름은 WelcomeServlet이고, 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력해야 합니다.]', to_date('25/05/24', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,4,1,'필기',q'[사용자가 입력한 이름을 받아서 환영 메시지를 출력하는 JSP 페이지를 작성하세요. 사용자가 name 파라미터로 입력한 값을 받아서 "Welcome, [name]!" 메시지를 출력하도록 JSP 페이지를 작성해 보세요.]', to_date('25/06/08', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,9,1,'필기',q'[스프링 부트 애플리케이션에서 RESTful 웹 서비스를 작성하고, 사용자가 입력한 이름을 받아서 환영 메시지를 반환하는 엔드포인트를 만드세요.]', to_date('25/06/23', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,10,1,'필기',q'[스프링 부트 애플리케이션을 작성하여, 간단한 RESTful 웹 서비스를 만들어 보세요. 이 웹 서비스는 /greeting 경로로 GET 요청을 받을 때, 사용자가 입력한 이름을 포함한 환영 메시지를 JSON 형식으로 반환해야 합니다.]', to_date('25/07/08', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,22,1,'필기',q'[AWS Lambda 함수를 사용하여 간단한 서버리스 애플리케이션을 작성해 보세요. 이 애플리케이션은 사용자가 입력한 이름을 받아서 환영 메시지를 반환합니다.]', to_date('25/07/23', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,41,1,'필기',q'[도커를 사용하여 간단한 Node.js 애플리케이션을 컨테이너화하고, 이를 실행하는 방법을 작성해 보세요.]', to_date('25/08/07', 'yy-mm-dd'));
insert into test(testSeq,subjectSeq,teacherSeq,testType,testContext,testDate) values (test_Seq.NEXTVAL,42,1,'필기',q'[YAML 파일을 사용하여 디플로이먼트와 서비스를 생성해 보세요.]', to_date('25/08/17', 'yy-mm-dd'));

