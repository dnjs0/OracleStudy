-- ex29_modeling.sql
/*

    데이터베이스 설계
    1. 요구사항 수집 및 분석 및 정리
    --------------------------------
    2. 개념 데이터 모델링(X)
    3. 논리 데이터 모델링
    4. 물리 데이터 모델링
    5. 정규화
    --------------------------------
    6. 데이터베이스 구축(구현) & 활용
    
    
    데이터 모델링
    - 요구 분석 기반 > 수집한 데이터 > 분석/평가 > 저장 구조 설계
        > 도식화 > 산출물(ERD)
    - 데이터를 저장하기 위한 데이터 구조를 설계하는 작업
    - 산출물 > ERD
    - 개념 > 간단한 표현의 설계도 > 테이블 이름 + 속성 + 관계 정도만 기술
    - 논리 > 속성(자료형, 길이) + 도메인 정의 + 키(key) 등..
    - 물리 > 물리적 식별자 + 실제로 적용한 특정 DBMS에 맞는 세부 설정..
    
    
    1. ERD, Entity Relationship Diagram
    - 엔티티(테이블)간의 관계를 표현한 그림
    - 데이터베이스 모델링 기법 중 하나
    - 손, 오피스, 전문툴(eXERD, ERWin, 온라인 툴 등..)
    
    2. Entity
    - 다른 Entity와 분류(구분)될 수 있고,
      다른 Entity에 대해 정해진 관계를 맺을 수 있는 데이터 단위
      
    - 릴레이션 = 엔티티 = 레코드 = 인스턴스 = 객체 >>> 집합(=테이블)
        a. 학생 정보 관련 수집
            - 수집 결과: 아이디, 학생명, 나이, 주소, 연락처 등..
            - 학생(아이디, 학생명, 나이, 주소, 연락처)
        b. 강의실 정보 관련 수집
            - 수집 결과: 강의실명, 크기, 인원수, 용도 등..
            - 강의실(강의실명, 크기, 인원수, 용도)

    3. Attribute, 속성
    - 엔티티를 구성하는 요소
    - 속성의 집합 = 엔티티
    - 구현 > 컬럼
    
    4. Relationship, 관계
    - 하나의 엔티티와 또 다른 엔티티의 관계 표현
    
    
    위의 요소들을 그리는 방법
    - 피터첸 or IE
    - 학생(아이디, 학생명, 나이, 주소, 연락처)
    - 강의실(강의실명, 크기, 인원수, 용도)
    
    1. Entity
    - 사각형
    - 이름을 작성
    - 엔티티명은 유일
    
    2. Attribute
    - 원
    - 엔티티와 선으로 연결(소속)
    
    3. Relationship
    - 마름모
    - 엔티티와 엔티티간의 관계
    
    
    관계 차수
    - 한쪽의 엔티티 1개가 다른 한쪽의 엔티티 ?개와 관계를 맺는지 표현
    - 1:1(일대일)
    - 1:N(일대다)
    - N:M(다대다)
    
    
    정규화, Normalization
    - 자료의 손실이나, 불필요한 정보를 없애고, 데이터의 일괄성을 유지하며,
        데이터의 종속성을 최소화하기 위해 ERD를 수정하는 작업
    - 우리가 만든 ERD > 비정형 상태, 비정규화된 상태 라고 한다. > 정규화 상태로 만들어야함.
    - 제1정규화, 제2정규화, 제3정규화 등...
    
    관계형 데이터베이스 시스템이 지향하는 데이터베이스의 상태(***)
    1. 최대한 null을 가지지 않는다.
    2. 중복값을 가지지 않는다.
    3. 원자값을 가진다.
    
    
    정규화의 목적!!!!
    1. null을 최대한 제거
    2. 중복값 제거
    3. 복합값 제거
    4. 자료의 삽입 이상, 갱신 이상, 삭제 이상 현상 제거
    
    
    이상 현상, Anomoly
    1. 삽입 이상
        - 특정 테이블의 데이터를 삽입할 때 > 원하지 않는 데이터까지 같이 넣어야 하는 상황
    2. 갱신 이상
        - 동일한 데이터가 2개 이상의 테이블에 동시 존재 > 수정 곤란
    3. 삭제 이상
        - 특정 테이블의 데이터를 삭제할 때 > 원하지 않는 데이터까지 같이 삭제되는 상황
        
    함수 종속
    - 하나의 테이블내에서 컬럼끼리의 관계
    - 정규화란 '부분 함수 종속'이나 '이행 함수 종속'을 모두 찾아 없애고,
        모든 컬럼의 관계를 '완전 함수 종속'으로 만드는 작업이다.
        
    1. 완전 함수 종속
    2. 부분 함수 종속
    3. 이행 함수 종속
    
    정규화
    - 1NF, 2NF, 3NF
    
    제 1정규화, 1NF
    - 모든 컬럼(속성)은 원자값을 가진다.
    - 여러개로 분리 가능한 값을 1개의 컬럼에 넣지 않는다.
    - 올바른 컬럼 <-분리-> 올바르지 않은 컬럼    
    - 1개의 테이블 > (정규화) > 2개 이상의 테이블
    
    제 2정규화, 2NF
    - 기본키가 아닌 나머지 컬럼은 기본키에 완전 함수 종속이어야 한다.
    - 부분 함수 종속 발견!! > 부분 함수 종속을 제거~
    - 복합키(2개의 이상 컬럼이 기본키가 된)를 가지는 테이블에서 발견된다.
    - 1개의 테이블 > (정규화) > 2개 이상의 테이블
    
    제 3정규화, 3NF
    - 기본키가 아닌 나머지 컬럼은 기본키에 완전 함수 종속이어야한다.
    - 이행 함수 종속 발견!! > 이행 함수 종속을 제거~
    - 1개의 테이블 > (정규화) > 2개 이상의 테이블
    
    
    역정규화 > 우리는 사용하지 않음, 연습이 안됨
    - 정규화된 결과를 다시 원래대로 되돌린다.
    - 현실적으로 결정    
    
    

*/


select * from tblMen;





















